package com.cbt.controller;

import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cbt.entity.MessageCenter;
import com.cbt.entity.OrderMessage;
import com.cbt.entity.QuotationBean;
import com.cbt.entity.QuotationProcessInfo;
import com.cbt.entity.QuotationProductionBean;
import com.cbt.entity.QuotationProductionPriceBean;
import com.cbt.service.MessageCenterService;
import com.cbt.service.QuotationProductionService;
import com.cbt.service.QuotationService;
import com.cbt.service.UserService;
import com.cbt.util.Base64Encode;
import com.cbt.util.DateFormat;
import com.cbt.util.OperationFileUtil;
import com.cbt.util.SplitPage;
import com.cbt.util.UploadAndDownloadPathUtil;
import com.cbt.util.WebCookie;

@Controller
public class QuotationController {

	private static final Log LOG = LogFactory.getLog(QuotationController.class);	
	
	@Resource
	UserService userService;	
	
	@Resource
    QuotationService quotationService;
		
	@Resource
	QuotationProductionService quotationProductionService;
	
	@Resource
	MessageCenterService messageCenterService;

	
	private static final int UNREAD_STATUS = 0;
	private static final int READ_STATUS = 1;
	private static final int CUSTOMER_MESSAGE = 1;
	private static final int MESSAGE_QUOTATION_TYPE = 4;
    private static final String QUOTATION_MESSAGE_TITLE = "Quotation Message";
	
	/**
	 * 查询报价单
	 * @author polo
	 * @time 2017.6.9
	 * @param request
	 * @return
	 */
	@RequestMapping("/queryAllQuotation.do")
	public String queryAllQuotation(HttpServletRequest request){
		
		try{
			
			String str1 = request.getParameter("page");
			String str2 = request.getParameter("pageSize");
			String user = request.getParameter("info");
			String begin = request.getParameter("beginDate");
			String end = request.getParameter("endDate");
			String userId = WebCookie.getUserid(request);
		   
		    int page = 1;
			if(str1 != null) {
				page = Integer.parseInt(str1);
			}
		    int pageSize = 10;   
			if(str2 != null) {
				pageSize = Integer.parseInt(str2);
			}
			int start = (page-1) * pageSize;  	  
					   
		List<QuotationBean> quotationInfos = quotationService.queryByUserid(user, begin, end, start, userId);
		int total = quotationService.total(user, begin, end, userId);
		SplitPage.buildPager(request, total, pageSize, page);
			
		request.setAttribute("userId", userId);
		request.setAttribute("quotationInfos", quotationInfos);
		} catch (Exception e) {
			LOG.info(">>>>>>>>>>>>>>>>>QuotationController_queryAllQuotation_exception--:--"+e);
			e.printStackTrace();
		}
		return "quotationList.jsp";
	}
	

	/**
	 * 跳转报价单详情界面
	 * @author polo
	 * 2017年6月15日
	 *
	 */
	@RequestMapping("/queryQuotationById.do")
	public String queryQuotationById(HttpServletRequest request,HttpServletResponse response){
		
		  try {
			  String id = request.getParameter("quotationInfoId");
			  id = Base64Encode.getFromBase64(id);
			  StringUtils.isBlank(id);
			  Integer quotationInfoId = Integer.parseInt(id);
			  QuotationBean quotationBean = quotationService.queryById(quotationInfoId);
			  List<QuotationProductionBean> quotationProductions = quotationProductionService.queryByQuotationInfoId(quotationInfoId);
			  List<List<QuotationProductionPriceBean>> productionPrices = new ArrayList<List<QuotationProductionPriceBean>>();
			  for (QuotationProductionBean quotationProductionBean : quotationProductions) {
				  List<QuotationProductionPriceBean> productionPrice = quotationProductionService.queryByProductionId(quotationProductionBean.getId());
				  productionPrices.add(productionPrice);
			  }	
			  
			 List<OrderMessage> messages = messageCenterService.queryByQuotationInfoId(quotationInfoId);
			 for (OrderMessage orderMessage : messages) {
			         String email = orderMessage.getLoginEmail();	
			         email = email.replaceAll("(\\w?)(\\w+)(\\w)(@\\w+\\.[a-z]+(\\.[a-z]+)?)", "$1****$3$4");
			         orderMessage.setLoginEmail(email);
			         
			         if(orderMessage.getTargetPriceReply() == 2){
						  String attachmentPath = orderMessage.getAttachmentPath(); 
							if(!(attachmentPath == null || "".equals(attachmentPath))){
							      File tempFile =new File(attachmentPath.trim());  		      
							      String name = tempFile.getName();
							      String[] split = name.split("&");
							      if(split.length != 0){
							    	 String fileName = split[0]+"."+FilenameUtils.getExtension(attachmentPath); 
							    	 orderMessage.setAttachmentPath(fileName);
							      }
							}	
					  }
		    } 
			 
			  //更新读取状态（1：已读）
			  quotationBean.setReadStatus(READ_STATUS);
			  quotationService.updateQuotation(quotationBean);
			  
			  request.setAttribute("messages", messages);
			  request.setAttribute("quotationBean", quotationBean);
			  request.setAttribute("quotationProductions", quotationProductions);
			  request.setAttribute("productionPrices", productionPrices);
			  
		} catch (NumberFormatException e) {
			e.printStackTrace();
			LOG.info(">>>>>>>>>>>>>>>>>QuotationController_queryQuotationById_exception--:--"+e);
		}
		  
		  
		  return "quotation.jsp";
	}
	
	
	/**
	 * 保存消息
	 * @param request
	 * @param response
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/saveQuotationMessage.do")
	public JsonResult<OrderMessage> saveQuotationMessage(HttpServletRequest request,HttpServletResponse response){
		
		try {
			OrderMessage orderMessage = new OrderMessage();
			MessageCenter messageCenter = new MessageCenter();
			
			StringUtils.isBlank(request.getParameter("quotationId"));
			Integer quotationInfoId = Integer.parseInt(request.getParameter("quotationId"));
			String messageDetails = request.getParameter("messageDetails");
			StringUtils.isBlank(request.getParameter("targetPriceReply"));
			Integer targetPriceReply = Integer.parseInt(request.getParameter("targetPriceReply"));
			String factoryId = request.getParameter("factoryId");
			String userId = request.getParameter("userId");
			String attachmentPath = request.getParameter("attachmentPath");
			
			
			orderMessage.setMessageDetails(messageDetails);
			orderMessage.setMessageSendTime(DateFormat.format());
			orderMessage.setReadStatus(UNREAD_STATUS);
			orderMessage.setTargetPriceReply(targetPriceReply);
			orderMessage.setCustomerOrFactory(CUSTOMER_MESSAGE);
			orderMessage.setFactoryId(factoryId);
			orderMessage.setPicStatus(0);
			orderMessage.setUserid(userId);
			orderMessage.setAttachmentPath(attachmentPath);
			
			messageCenter.setFactoryId(factoryId);
			messageCenter.setMessageTitle(QUOTATION_MESSAGE_TITLE);
			messageCenter.setMessageType(MESSAGE_QUOTATION_TYPE);
			messageCenter.setUserid(userId);
			messageCenter.setQuotationInfoId(quotationInfoId);
			
			orderMessage = messageCenterService.insertQuotaionMessage(messageCenter, orderMessage);
												
			return new JsonResult<OrderMessage>(orderMessage);
			
		} catch (NumberFormatException e) {
			e.printStackTrace();
			LOG.info(">>>>>>>>>>>>>>>>>QuotationController_saveQuotationMessage_exception--:--"+e);
			return new JsonResult<OrderMessage>(0,e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			LOG.info(">>>>>>>>>>>>>>>>>QuotationController_saveQuotationMessage_exception--:--"+e);
			return new JsonResult<OrderMessage>(0,e.getMessage());
		}	
	}
	
	
	
	
	@RequestMapping("/toAddRequirement.do")
	public String toAddRequirement(HttpServletRequest request,HttpServletResponse response){
		
		StringUtils.isBlank(request.getParameter("quotationId"));
		Integer quotationId = Integer.parseInt(request.getParameter("quotationId"));	
	    QuotationBean quotation = quotationService.queryById(quotationId);
	    
		request.setAttribute("quotationId", quotationId);
		request.setAttribute("quotation", quotation);
		
		return "requirement.jsp";		
	}
	
	
	/**
	 * 报价单新需求上传附件
	 * @param request
	 * @param response
	 * @return
	 */
    @ResponseBody
	@RequestMapping("/uploadAttachment.do")
	public JsonResult<String> uploadAttachment(HttpServletRequest request,HttpServletResponse response){
		
	 try {
		 
		String factoryId = request.getParameter("factoryId"); 
        String path = UploadAndDownloadPathUtil.getQuotationPath1() + factoryId +File.separator;
		Map<String, String> multiFileUpload = OperationFileUtil.multiFileUpload(request, path);
		String fileNamePath = "";
		if(!(multiFileUpload == null || multiFileUpload.size() == 0)){
			 Set<String> keySet = multiFileUpload.keySet();
			   for (String key : keySet) {	
				  String fileName = multiFileUpload.get(key);
				  fileNamePath = path + fileName;
			   }
		} 
		
		return new JsonResult<String>(0,"success",fileNamePath);	
	} catch (IllegalStateException e) {
		e.printStackTrace();
		LOG.info(">>>>>>>>>>>>>>>>>QuotationController_uploadAttachment_exception--:--"+e);
		return new JsonResult<String>(1,"failed");	
	} catch (IOException e) {
		e.printStackTrace();
		LOG.info(">>>>>>>>>>>>>>>>>QuotationController_uploadAttachment_exception--:--"+e);
		return new JsonResult<String>(1,"failed");	
	}
			
	}
	
	
    
    /**
     * 客户收到邮件后显示当前报价单信息
     * @param request
     * @param response
     * @return
     */
	@RequestMapping("/viewQuotationById.do")
	public String viewQuotationById(HttpServletRequest request,HttpServletResponse response){
    	
		try {
			StringUtils.isBlank(request.getParameter("quotationId"));
			Integer quotationId = Integer.parseInt(request.getParameter("quotationId"));
			QuotationBean quotationBean = quotationService.queryById(quotationId);		
			request.setAttribute("quotationBean", quotationBean);
		} catch (NumberFormatException e) {
			e.printStackTrace();
			LOG.info(">>>>>>>>>>>>>>>>>QuotationController_viewQuotationById_exception--:--"+e);
		}
		
    	return "quotationToView.jsp";
    }
    
    
	/**
	 * 查询产品价格详情
	 * @param request
	 * @param response
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/queryPriceDetails.do")
	public JsonResult<Map<String,Object>> queryPriceDetails(HttpServletRequest request,HttpServletResponse response){
		
		try {
			Integer priceId = null;
			Integer productId = null;
			Integer quotationInfoId = null;
			if(!(StringUtils.isBlank(request.getParameter("priceId")))){
				priceId = Integer.parseInt(request.getParameter("priceId"));
			}else{
				return new JsonResult<Map<String,Object>>(1,"未获取到价格表ID");
			}
			if(!(StringUtils.isBlank(request.getParameter("productId")))){
				productId = Integer.parseInt(request.getParameter("productId"));
			}else{
				return new JsonResult<Map<String,Object>>(1,"未获取到产品表ID");
			}
			if(!(StringUtils.isBlank(request.getParameter("quotationInfoId")))){
				quotationInfoId = Integer.parseInt(request.getParameter("quotationInfoId"));
			}else{
				return new JsonResult<Map<String,Object>>(1,"未获取到报价表ID");
			}
			QuotationBean quotationBean = quotationService.queryById(quotationInfoId);
			QuotationProductionBean quotationProductionBean = quotationProductionService.queryProductionById(productId);
			List<QuotationProcessInfo> list = quotationProductionService.queryProcessByProductionId(priceId);
			QuotationProductionPriceBean priceBean = quotationProductionService.queryByPriceId(priceId);
			Double materialUnitPrice = priceBean.getMaterialWeight() * priceBean.getQuantity();
			materialUnitPrice = new BigDecimal(materialUnitPrice).setScale(4, BigDecimal.ROUND_HALF_UP).doubleValue();
			priceBean.setMaterialWeight(materialUnitPrice);
			
			Map<String,Object> map = new HashMap<String, Object>();
			
			map.put("quotationBean", quotationBean);
			map.put("productionBean", quotationProductionBean);
			map.put("processList", list);
			map.put("priceBean", priceBean);
			return new JsonResult<Map<String,Object>>(map);
			
		} catch (NumberFormatException e) {
			e.printStackTrace();
			return new JsonResult<Map<String,Object>>(1,"获取失败");
		}
		
	}
    
}









