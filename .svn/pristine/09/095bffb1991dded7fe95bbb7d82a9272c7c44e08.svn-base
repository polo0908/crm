package com.cbt.util;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import com.cbt.entity.User;


public class WebCookie {
	public static String cookie(HttpServletRequest request,String cookiev){
		Cookie[] cookie= request.getCookies();
		if(cookie!=null){
			for (Cookie cookie2 : cookie) {
				if(cookie2.getName().equals(cookiev)){
					return cookie2.getValue();
				}
			}
		}
		return null;
	}
	
	public static String cookieValue(HttpServletRequest request,String cookiev){
		Cookie[] cookie= request.getCookies();
		if(cookie!=null){
			for (Cookie cookie2 : cookie) {
				//LOG.warn("cookie:"+cookie2.getName()+","+cookie2.getValue());
				if(cookie2.getName().equals(cookiev)){
					return cookie2.getValue();
				}
			}
		}
		return null;
	}
 
	/**
	 * 根据名字获取cookie
	 * @param request
	 * @param name cookie名字
	 * @return
	 */
	public static Cookie getCookieByName(HttpServletRequest request,String name){
		Map<String,Cookie> cookieMap = ReadCookieMap(request);
	    if(cookieMap.containsKey(name)){
	        Cookie cookie = cookieMap.get(name);
	        return cookie;
	    }else{
	        return null;
	    }   
	}
	/**
	 * 将cookie封装到Map里面
	 * @param request
	 * @return
	 */
	private static Map<String,Cookie> ReadCookieMap(HttpServletRequest request){
		Map<String,Cookie> cookieMap = new HashMap<String,Cookie>();
		Cookie[] cookies = request.getCookies();
		if(null!=cookies){
			for(Cookie cookie : cookies){
	            cookieMap.put(cookie.getName(), cookie);
	        }
		}
		return cookieMap;
	}
	
	 
	
	/**
	 * 判断用户是否登录
	 */
	public static  String[] getUser(HttpServletRequest request){
		    String user = WebCookie.cookie(request, "user");
		    String[] userInfo = null;
		    if(user != null){
		       userInfo = user.split("&");
		    }
			return userInfo;
	}
	
	// 从cookies中获取uderid
	public static String getUserid(HttpServletRequest request){
		
		String userid = "";
		String user = WebCookie.cookie(request, "user");
		if (!user.equals("") && user != null) {
			String[] userInfo = user.split("&");
			userid = userInfo[0];
		} else {
			try {
				throw new Exception("获取用户失败!");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		return userid;		
	}
	// 从cookies中获取loginEmail
	public static String getLoginEmail(HttpServletRequest request){
		
		String loginEmail = "";
		String user = WebCookie.cookie(request, "user");
		if (!user.equals("") && user != null) {
			String[] userInfo = user.split("&");
			loginEmail = userInfo[1];
		} else {
			try {
				throw new Exception("获取邮箱失败!");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		return loginEmail;		
	}
	
	
	
	// 从cookies中获取用户密码的信息
		public static String getPwd(HttpServletRequest request){
					
			Cookie[] cookies = request.getCookies();
			String userStr = "";
			String pwd = "";
			for (Cookie ck : cookies) {
				if (ck.getName().equals("user")) {
					userStr = ck.getValue();
					break;
				}
			}
			if (!userStr.equals("")) {
				String[] userInfo = userStr.split("&");
				String encryptTxt = userInfo[2];
				try {
					pwd = SecurityHelper.decrypt("token", encryptTxt);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				try {
					throw new Exception("获取用户失败!");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			return pwd;		
		}
		
		
		
		
		
		// 从session中获取访问链接
		public static Object getViewURL(HttpServletRequest request){
			
			HttpSession session = request.getSession();
			Object url = session.getAttribute("viewURL");	
			
			
			return url;		
		}
		
		
		
}
